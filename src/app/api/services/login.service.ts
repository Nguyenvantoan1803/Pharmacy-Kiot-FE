/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiLoginLoginPost } from '../fn/login/api-login-login-post';
import { ApiLoginLoginPost$Params } from '../fn/login/api-login-login-post';
import { apiLoginLogoutPost } from '../fn/login/api-login-logout-post';
import { ApiLoginLogoutPost$Params } from '../fn/login/api-login-logout-post';

@Injectable({ providedIn: 'root' })
export class LoginService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiLoginLoginPost()` */
  static readonly ApiLoginLoginPostPath = '/api/Login/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLoginLoginPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginLoginPost$Response(params?: ApiLoginLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiLoginLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLoginLoginPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginLoginPost(params?: ApiLoginLoginPost$Params, context?: HttpContext): Observable<void> {
    return this.apiLoginLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiLoginLogoutPost()` */
  static readonly ApiLoginLogoutPostPath = '/api/Login/logout';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLoginLogoutPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginLogoutPost$Response(params?: ApiLoginLogoutPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiLoginLogoutPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLoginLogoutPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLoginLogoutPost(params?: ApiLoginLogoutPost$Params, context?: HttpContext): Observable<void> {
    return this.apiLoginLogoutPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
